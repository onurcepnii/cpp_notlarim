___________________________________

	Copy Constructor
___________________________________

Bir nesne hayata değerini aynı türden bir başka nesneden alarak gelirse, hayata gelen nesne için çağırılan fonksiyon sınıfın copy constructor dediğimiz
special member fonksiyondur.



Kopyalama Semantiği Ne Demek?
-----------------------------
Bir nesneyi bir başka nesnenin değeriyle hayata getiriyoruz. Ya da bir nesneye bir başka nesnenin değerini atıyoruz.

Bu durumda;

 (1) Bu nesneler birbirinden bağımsız yani bundan sonraki bu nesnelerin biri üzerinde yapılan işlemler diğerini etkilemeyecek. Yani bu nesneler
	değerce birbirlerinden	bağımsız.
 (2) Bu nesneler karşılaştırılabilir (equality comparable) nesneler ise, bu atamadan sonra bu nesneler eşit olacak.




	class Myclass{};

	int main(){

		Myclass m1;

		Myclass m2(m1);	// m2 için cc çağırılacak


	}



* Her sınıfın copy constructoru olmak zorunda.


Rule Of Zero Ne Demek?
----------------------
Herhangi bir sorun çıkarmıyorsa special member fonksiyonlarının derleyici tarafından yazılması. Derleyicinin yazdığı fonksiyonların
işimizi gördüğü noktada tercihimiz hep o yönde olmalı.

-----
-gpt-
Eğer sınıfın hiçbir kaynak yönetimi (dynamic memory, file handle vs.) yoksa, special member function’ları kendin yazmana gerek yok.

Derleyici tarafından otomatik üretilen default ctor, copy ctor, move ctor, copy/move assignment, destructor yeterli olur.
-----


Derleyicinin implicitly declare edilen ve default edilen copy constructor şöyle bir parametrik yapıya sahip;
-public, non static, inline üye fonksiyonu
-parametresı sınıf türünden sol taraf referansı

	class Myclass{
	public:
		//////
		Myclass(const Myclass &r) : ax(r.ax), bx(r.bx), cx(r.cx) {}	

	private:
		A ax;
		B bx;
		C cx;
	};

Derleyicinin yazdığı copy constructor sınıfın elemanlarını, diğer nesnenin elemanlarıyla copy construct ediyor. Böylece hayata gelen nesne değerini
diğer nesnenin elemanlarından alıyor.

Örnek:

	class Date{
	public:
		Date(int d, int m, int y) : md{d}, mm{m}, my{y} 
		{
			std::cout << "Date(int,int,int) this = << this << '\n\;
		}
		
		~Date()
		{
			std::cout << "~Date() this = " << this << '\n';
		}

	private:
		int md, mm, my;
	};


	int main()
	{
		Date d1{ 12, 3, 1997 };

		Date d2 = d1;
	}

Output:		Date(int, int, int) this = 00EFFD38
		~Date() this = 00EFFD2C
		~Date() this = 00EFFD38

Buradan anlıyoruz ki derleyici copy constructor yazmış ve d2 nesnesini onun ile oluşturmuş.




Başka Hangi Durumlarda Copy Constructor Çağırılır?
--------------------------------------------------

(1) Bir fonksiyonun parametresinin bir sınıf türünden olması ve fonksiyona da sınıf türünden bir argüman geçilmesi.
	
	class Myclass {};
	void func(Myclass m)
	{
	
	}
	
	int main()
	{
		Myclass m1;
		func(m1);		// böyle bir nesne (m1) ile çağırırsak, burada fonksiyonun parametre değişkeni için copy constructor çağırılacak.
	
	}


Bu senaryoda fonksiyonun parametresi için copy constructor çağırılır ve nesne oluşturur.


(2) Bir fonksiyonun geri dönüş değeri türünün bir sınıf türü olması ve fonksiyonun return ifadesinin bir myclass nesnesi olması.

	class Myclass{};

	Myclass g;

	Myclass foo()
	{
		return g;
	}

Bu durumda fonksiyonun geri dönüş değerini tutacak temporary object için yine copy constructor çağırılacak. Fakat burada dilin bazı başka kuralları devreye
girebiliyor => Copy elision, return value optimization, named return value optimization, mandatory/guaranteed copy elision gibi.

* O ya da bu nedenle copy constructor delete veya default edilebilir.

	class Myclas{
	public:
		Myclass(const Myclass&) = default;
	};

////////////////

	class Myclas{
	public:
		Myclass(const Myclass&) = delete;
	};

	int main()
	{
		Myclass m1;
		Myclass m2 = m1; // sentaks hatası.
	}





Madem derleyici copy constructor yazıyor, biz hangi senaryolarda copy constructor yazmalıyız?
- Öyle sınıflar var ki, bu sınıflar kaynak(resource) kullanıyorlar. Bu kaynak dinamik allocate edilmiş bir bellek bloğu olabilir, bir dosya olabilir, bir 
veri tabanı bağlantısı olabilir vs.vs. Böylesi durumlarda sınıf nesneleri bu kaynağa tipik olarak bir handle tutuyor(pointer veya referans).

	class String{
	public:
		String(const char*);

	private:
		char* mp;  // dinamik olarak allocate edilen bellek bloğunun adresini tutsun
		std::size_t mlen;
	};

	int main()
	{
		String str("bugun hava cok guzel"); // dinamik bellek bloğu allocate edilecek, mp o bloğun adresini tutacak. mlen ise yazının uzunluğunu
						    // tutacak.
		String s = str;  //copy constructor ile s nesnesi oluşturulacak.
	}


					       ac40 = blok başının adresi
     ------------				__
str | mp = ac40  | ----------------------->    "bugun hava cok guzel"
    | mlen = 20  |		 	     ^ 
     ------------                            |
					     |
                                             |			str nesnesinin değerleri ile s nesnesi copy constructor vasıtası ile oluşturuldu.
				             |			fakat bu sefer şöyle bir problem var ki bu nesnelerden birisinin hayatı biterse bu allocate
					     |			edilmiş bellek alanı destructor ile free edilecek.
     ------------			     |
s   | mp = ac40  |----------------------------
    | mlen = 20  |		 
     ------------


____________________________________________________________________

	RAII IDIOMU (Resource Acquisition Is Initialization)
____________________________________________________________________

Constructor kaynağı edinir, destructor kaynağı geri verir. Destructor çağırıldığında kaynak sızıntısı ihtimali oratan kalkar.




class String{
	public:
		String(const char*);
		~String()
		{
			if(mp)
			  std::free(mp);
		}

	private:
		char* mp;  // dinamik olarak allocate edilen bellek bloğunun adresini tutsun
		std::size_t mlen;
	};
	
	void func(String s)
	{
		//
		// burada s'nin hayatı bitiyor. ve s için çağırılan destructor bellek bloğunu free edecek. fakat str'nin hayatı devam ediyor.
		// o halde str dangling pointera dönüşür.
	}


	int main()
	{
		String str("bugun hava cok guzel"); // dinamik bellek bloğu allocate edilecek, mp o bloğun adresini tutacak. mlen ise yazının uzunluğunu
						    // tutacak.
		String s = str;  //copy constructor ile s nesnesi oluşturulacak.
		func(str);	
	}



İşte böyle sınıflar için copy constructor yazma görevini derleyiciye verirsek derleyici elemanları birbirine kopyalıyor. Oysa çoğu zaman bizim istediğimiz,
yukarıdaki kodda olduğu gibi, bu nesnelerin birbirinden bağımsızlığını kılmak ve value semantiği korumak için hayata gelen nesnede ayrı bir bellek alanı
allocate edecek bir copy constructor olması. Yani görsel olarak şöyle;


					       ac40 = blok başının adresi
     ------------				__
str | mp = ac40  | ----------------------->    "bugun hava cok guzel"
    | mlen = 20  |		 	     
     ------------                           			
 
					       f2d4
     ------------			       __
s   | mp = f2d4  |------------------------>   "bugun hava cok guzel"
    | mlen = 20  |		 
     ------------


"Kaynağın kendisi değil o kaynağın adresini tutan pointer, referans kopyalanıyor" ==> shallow copy, memberwise copy
"Kendi kaynağını edinsin, copy constructor ile hayata gelen nesnenin kaynağına kopyalama yapılsın" ==> deep copy

Örneğin yukarda deep copy kullanmamız gerekir.



	
class String{

	public:
	String(const String& other) : mlen(other.mlen)
	{
		mp = static_cast<char*>(std::malloc(mlen + 1));
		if(!mp) {
			std::cerr << "cannot allocate memory\n";
			std::exit(EXIT_FAILURE); }
		std::strcpy(mp, other.mp);
	}

	String(const char* p) :  mlen(std::strlen(p))
	{
		mp = static_cast<char*>(std::malloc(mlen + 1));
		if(!mp){
			std::cerr << "cannot allocate memory\n";
			std::exit(EXIT_FAILURE);
		}
		std::strcpy(mp, p);
	}

	~String()
	{
		if(mp)
			std::free(mp);
	}
	
	std::size_t length() const
	{
		return mlen;
	}

	void print() const
	{
		//..
		std::cout << '[' << mp << "]\n";
	}

	private:
	std::size_t m_len;
	char* mp;
};

int main()
{
	String str("bugun sinifin ozel fonksiyonlarini isliyoruz");
	
	str.print();
}


Bu kodda biz copy constructor yazmasak derleyicinin yazacağı copy constructor bu;
	String(const String &other) : mlen(other.mlen), mp(other.mp) {}

İşte bu sığ kopyalama yani shallow copy, memberwise copy.

Fakat bizim işimizi bu görmüyor o yüzden kendimiz yazdık. 

* Copy Constructor'u programcı olarak biz implemente ediyorsak, artık bütün veri elemanlarının alması gereken
değerleri almasından biz sorumluyuz. Derleyiciye bırakırsak derleyici onları default init. eder. Fakat tabi böyle
init. edilmesi işimize geliyor, bir problem olmuyorsa sorun yok.

	String str("string metni");
	String str2("string2 metni");

	str = str2;	// !!! operator overloading

* Bir sınıf nesnesini  atama op. kullanarak aynı türden bir l val. expr. sınıf nesnesi atandığında, bu atama işlemini
yapan sınıfın özel bir üye fonksiyonu ==> Copy Assignment Function

* Burada kopyalama yapan fonksiyon, sınıfın copy assignment fonksiyonu. Sınıfın copy assignment fonksiyonu olmak zorunda yani olmamak gibi bir ihtimal
söz konusu değil.

* Fonksiyonun isminin içinde operator keywordü olacak. Ondan sonra hangi operatörü overload ediyorsak, yani sınıf nesnesi hangi operatörün operandı olduğunda
derleyicinin o ifadeyi bu fonksiyona yapan çağrıya dönüştürmesini istiyorsak o operatörün sembolü gelecek.

	operator+
	operator==
	operator!=
	operator++

O zaman atama da bir operatör. Sınıf nesnesi  atama operatörünün operandı olduğunda bu bir fonksiyon çağrısına dönüştürülüyorsa bu da bir operator overloading
vakası. O halde benzer şekilde fonksiyonun isminin operator assignment ->  operator=

Bir sınıf nesnesine aynı türden başka bir sınıf nesnesini atama operatörü ile atadığımız zaman çağırılan fonksiyonun ismi -> Operator Assignment



	class Myclass()
	{
	
	};

	int main()
	{
		Myclass m1, m2;

		m1 = m2;	// burada çağırılan fonksiyon bir constructor değil. Constructor nesneyi hayata getiren bir fonksiyon.
				// burada hayata gelen bir fonksiyon yok, m1 de m2'de zaten hayatta. 
				// m1.operator = (m2);	bu da aynı anlamda
	}


* Dolayısıyla Copy Assignment fonksiyonu nesne hayata getiren bir fonksiyon değil. Ve dolayısıyla constructor ve destructor için geçerli olan geri dönüş
değeri kavramı olmaması durumu bu fonksiyon için geçerli değil.

Derleyici Copy Assignment Fonksiyonunu Nasıl Yazar?


	class Myclass{
	public:
		Myclass(const Myclass &r) : ax(r.ax), bx(r.bx), cx(r.cx) {}
		Myclass& operator=(const Myclass &)	// copy assignment function // derleyici böyle bir definition yapar;
		{
			ax = r.ax;
			bx = r.bx;	// Eğer elemanlar primitive türlerse bu atamalar basit atamalardır.
			cx = r.cx;	// Fakat bunlar sınıf türünden nesnelerse, bu sefer sınıf türünden nesneler atama operatörünün operandı olduğu için
					// yine elemanlar için copy assignment fonksiyonu çağırılır.
			return *this;	// fonksiyonun geri dönüş değeri atama operatör fonksiyonu kendisine atama yapılmış nesneyi döndürür.
		}			
	private:			
		A.ax;
		B.bx;
		C.cx;
	};

* Eğer yukardaki copy assignment fonksiyon tekse ve overloadu yoksa, aldığı argüman L value de R value de olabilir. Çünkü const l val referans hem l hem r
valueye bağlanır.


//////////////////////////////

	a = b 	// bu işi yapan fonksiyonun geri dönüş değeri L value referans olduğuna göre, bu ifade bir Lvalue expression'dur.


Geri dönüş değerinin L value reference olması, C++ dilinde atama operatörü ile oluşturulan ifadelerin L value olmasını destekliyor.
Yani sadece sınıflar için değil, genel olarak atama operatörü ile oluşturulan ifadeler C++'da L value expression'dur.


//////////////////////////////


	Myclass m1, m2;

	m1.operator = (m2);			// bu fonksiyonun geri dönüş değeri L val. ref. ve m1'in kendisini döndürür. O halde şöyle yapabiliriz;
	m1.operator=(m2).set(12).print();	// set fonksiyonunu m1 için çağırmış oluyoruz. hatta set fonksiyonunun da geri dönüş değeri eğer
						// Myclass& ise print fonksiyonunu da m1 için çağırmış oluyoruz.
	

--------------------------------------

Copy Assignment işleminde yine daha önce bahsettiğimiz ve yazdığımız ufak çaplı String sınıfındaki UB,dangling pointer durumunu hatırlayalım. Deep copy ve 
shallow copy. Burada da deep copy olmadığı için eğer copy assignment kodunu derleyici yazarsa buna benzer bir problem olur. Fakat farklı olarak bu durumda
zaten nesnemiz hayatta, yani yeni bir nesne oluşturulmuyor constructor ile. Fakat bu durumda kaynağı doğrudan kaybediyoruz ve resource leak oluşmuş oluyor.

Yani burada copy assignmentin yapması gereken kendi kaynağını geri verecek ve böylece resource leak olmasını baştan engelleyecek. Sonrası aslında copy 
constructorun koduyla neredeyse aynı kod. Yeni kaynak edinecek ve deep copy yapacak.


	deep copy		copy ctor
	release resources	destructor

Copy assignment rr + dp yapar.

Bazı sınıfları implemente ederken bunları ayrıştırıyorlar kod tekrarını engellemek için. Release resources ve deep copy örneğin ayrı fonksiyonlar olabiliyor.
Copy Assignment bu ikisini çağırabiliyor. Copy Constructor sadece deep copy çağırıyor vs.

--------------------------------------

 Copy Assignment Fonksiyonunu daha önce sadece bazı kavramları kavramak için oluşturduğumuz küçük çaplı String sınıfı için kendimi yazalım:

 String& operator=(const String &other)
 {
	mlen = other.mlen;
	std::free(mp);		//önce kaynağımızı geri veriyoruz. // derleyiciye bıraksak mp = other.mp; yapacak ve yukarda bahsettiğimiz problemler olacak

	mp = static_cast<char*>(std::malloc(mlen + 1));

	if(!mp)
		std::cerr << "cannot allocate memory \n";
		std::exit(EXIT_FAILURE);
	}
	std::strcpy(mp, other.mp);	
	return *this;
 }

//////////////////////////

	int x = 10;
	
	x = x;	//self-assignment

* Eğer biz nesnemiz için böyle bir self-assignment yaparsak problem olur;


	String str("bugun ozel fonksiyonlari goruyoruz");

	str = str;
	
	str.print();

* Ne olmuş oldu? Biz copy assignment fonksiyonunda yazdığımız kodda iki nesne de aynı ve biz o kodda kopyalanan nesnenin kaynağını geri verdik fakat bu durumda
iki nesne de aynı. Yani ikisinin kaynağını da free etmiş olduk. Bu durumda pointerlar dangling pointer oldu.

* Eğer nesnenin kendisine atanmasında bir problem olmasını istemiyorsak, atama operatörünün sol operandı olan nesne ile sağ operandı olan nesnin aynı nesne
olup olmadığını kontrol etmemiz lazım.

Bu kontrolü de iki nesnenin adreslerini karşılaştırarak yapabiliriz.
	
	String& operator=(const String& other)
	{
		if(this == &other) // self assignment
			return *this;
		...
		...
	}

************

this: Atama operatörünün çağrıldığı nesnenin adresi.
&other: Atama işleminde sağ taraftaki nesnenin adresi.

************


Peki neden gidip de programcı x = x yapsın? Fakat self-assignment sadece bu şekilde yapılmaz tabi ki.

	void func(Myclass *p1, Myclass *p2)
	{
		*p2 = *p1;	// örneğin burada her iki parametreye aynı nesne geçilmeyeceği ne malum? o zaman da self-assignment olur.
	}




